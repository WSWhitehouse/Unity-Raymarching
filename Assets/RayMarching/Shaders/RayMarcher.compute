#pragma kernel CSMain

/// RENDER VARIABLES
Texture2D<float4> Source;
RWTexture2D<float4> Destination;

/// CAMERA VARIABLES
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

/// LIGHT VARIABLES
float3 _Light;
bool _PositionLight;

/// CONST VARIABLES
static const float maxDst = 80;
static const float epsilon = 0.001f;
static const float shadowBias = epsilon * 50;

/// TIME VARIABLES
float _Time;

/// SHAPE VARIABLES
struct Shape
{
    float3 position;
    float3 rotation;
    float3 scale;
    float3 colour;
    int shapeType;
    int operation;
};

StructuredBuffer<Shape> Shapes;
int NumShapes;

// ROTATION
float2x2 RotateAngle(float angle)
{
    float s = sin(angle);
    float c = cos(angle);
    return float2x2(c, -s, s, c);
}

/// DISTANCE FUNCTIONS
// Following distance functions from 
// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm

float SDF_Cube(float3 origin, Shape shape)
{
    float3 pos = shape.position;
    float3 rot = shape.rotation;
    pos.yz = mul(RotateAngle(rot.x), pos.yz);
    pos.xz = mul(RotateAngle(rot.y), pos.xz);
    pos.xy = mul(RotateAngle(rot.z), pos.xy);
    origin.yz = mul(RotateAngle(rot.x), origin.yz);
    origin.xz = mul(RotateAngle(rot.y), origin.xz);
    origin.xy = mul(RotateAngle(rot.z), origin.xy);
    float3 scale = shape.scale;

    float3 o = abs(origin - pos) - scale;
    return length(max(o, 0.0)) + min(max(o.x, max(o.y, o.z)), 0.0);
}

/// SHAPE DISTANCE
float GetShapeDistance(float3 origin, Shape shape)
{
    if (shape.shapeType == 0)
    {
        return SDF_Cube(origin, shape);
    }

    return maxDst;
}

/// RAY
struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

/// OPERATIONS
// polynomial smooth min (k = 0.1);
// from https://www.iquilezles.org/www/articles/smin/smin.htm
float4 Blend(float a, float b, float3 colA, float3 colB, float k)
{
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    float blendDst = lerp(b, a, h) - k * h * (1.0 - h);
    float3 blendCol = lerp(colB, colA, h);
    return float4(blendCol, blendDst);
}

float4 Combine(float dstA, float dstB, float3 colourA, float3 colourB, int operation, float blendStrength)
{
    float dst = dstA;
    float3 colour = colourA;

    if (operation == 0)
    {
        if (dstB < dstA)
        {
            dst = dstB;
            colour = colourB;
        }
    }
        // Blend
    else if (operation == 1)
    {
        float4 blend = Blend(dstA, dstB, colourA, colourB, blendStrength);
        dst = blend.w;
        colour = blend.xyz;
    }
        // Cut
    else if (operation == 2)
    {
        // max(a,-b)
        if (-dstB > dst)
        {
            dst = -dstB;
            colour = colourB;
        }
    }
        // Mask
    else if (operation == 3)
    {
        // max(a,b)
        if (dstB > dst)
        {
            dst = dstB;
            colour = colourB;
        }
    }

    return float4(colour, dst);
}

float4 SceneInfo(float3 origin)
{
    float globalDst = maxDst;
    float3 globalColour = 1;

    for (int i = 0; i < NumShapes; i ++)
    {
        Shape shape = Shapes[i];
        float localDst = GetShapeDistance(origin, shape);
        float3 localColour = shape.colour;

        float4 globalCombined = Combine(globalDst, localDst, globalColour, localColour, shape.operation,
                                        1);
        globalColour = globalCombined.xyz;
        globalDst = globalCombined.w;
    }

    return float4(globalColour, globalDst);
}

float3 EstimateNormal(float3 pos)
{
    float x = SceneInfo(float3(pos.x + epsilon, pos.y, pos.z)).w - SceneInfo(float3(pos.x - epsilon, pos.y, pos.z)).w;
    float y = SceneInfo(float3(pos.x, pos.y + epsilon, pos.z)).w - SceneInfo(float3(pos.x, pos.y - epsilon, pos.z)).w;
    float z = SceneInfo(float3(pos.x, pos.y, pos.z + epsilon)).w - SceneInfo(float3(pos.x, pos.y, pos.z - epsilon)).w;
    return normalize(float3(x, y, z));
}

float CalculateShadow(Ray ray, float dstToShadePoint)
{
    float rayDst = 0;
    int marchSteps = 0;
    float shadowIntensity = 0.2;
    float brightness = 1;

    while (rayDst < dstToShadePoint)
    {
        marchSteps ++;
        float4 sceneInfo = SceneInfo(ray.origin);
        float dst = sceneInfo.w;

        if (dst <= epsilon)
        {
            return shadowIntensity;
        }

        brightness = min(brightness, dst * 200);

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }
    return shadowIntensity + (1 - shadowIntensity) * brightness;
}


[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Destination.GetDimensions(width, height);

    Destination[id.xy] = Source[id.xy];

    float2 uv = id.xy / float2(width, height) * 2 - 1;
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;

    while (rayDst < maxDst)
    {
        marchSteps ++;
        float4 sceneInfo = SceneInfo(ray.origin);
        float dst = sceneInfo.w;

        if (dst <= epsilon)
        {
            float3 pointOnSurface = ray.origin + ray.direction * dst;
            float3 normal = EstimateNormal(pointOnSurface - ray.direction * epsilon);
            float3 lightDir = _PositionLight ? normalize(_Light - ray.origin) : -_Light;
            float lighting = saturate(saturate(dot(normal, lightDir)));
            float3 col = sceneInfo.xyz;

            // Shadow
            float3 offsetPos = pointOnSurface + normal * shadowBias;
            float3 dirToLight = _PositionLight ? normalize(_Light - offsetPos) : -_Light;

            ray.origin = offsetPos;
            ray.direction = dirToLight;

            float dstToLight = _PositionLight ? distance(offsetPos, _Light) : maxDst;
            float shadow = CalculateShadow(ray, dstToLight);

            Destination[id.xy] = float4(col * lighting * shadow, 1);

            break;
        }

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }
}
