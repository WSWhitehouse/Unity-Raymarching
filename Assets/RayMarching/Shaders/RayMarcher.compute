#pragma kernel CSMain

// INCLUDES
#include "WSWMath.cginc"
#include "InterpolationF.cginc"

// CONST VARIABLES
static const float MAX_DST = 80;
static const float EPSILON = 0.001f;
static const float SHADOW_BIAS = EPSILON * 50;

// RENDER VARIABLES
Texture2D<float4> Source;
RWTexture2D<float4> Destination;

// CAMERA VARIABLES
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

// LIGHT VARIABLES
float3 _Light;
bool _PositionLight;

// TIME VARIABLES
float _Time;

// SHAPE VARIABLES
struct Shape
{
    // Translation
    float3 Position;
    float3 Rotation;
    float3 Scale;

    // Object Properties
    float3 Colour;
    int ShapeType;
    float3 Modifier;

    // RayMarch
    float MarchingStepAmount;
    int Operation;
    float BlendStrength;
    float Roundness;
    float WallThickness;

    // Sine Wave
    int EnableSineWave;
    float3 SineWaveDirection;
    float SineWaveFreq;
    float SineWaveSpeed;
    float SineWaveAmp;

    // Num of Children
    int NumOfChildren;
};

StructuredBuffer<Shape> Shapes;
int NumShapes;

// DISTANCE FUNCTIONS
// Following distance functions from 
// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm

float SdfBox(float3 origin, Shape shape)
{
    float3 pos = shape.Position;
    float3 scale = shape.Scale;

    float3 o = abs(origin - pos) - scale;
    return length(max(o, 0.0)) + min(max(o.x, max(o.y, o.z)), 0.0);
}

static const int arraySize = 12;
float edges[arraySize];

float SdfBoundingBox(float3 origin, Shape shape)
{
    float minScale = min(shape.Scale);
    float maxThickness = minScale / 2.0f;
    float thickness = shape.Modifier.x * maxThickness;
    float3 center = shape.Position;
    float3 edgePos = float3(shape.Scale.x - thickness, shape.Scale.y - thickness, shape.Scale.z - thickness);

    float3 edge = abs(origin - center + float3(edgePos.x, edgePos.y, 0)) // XY
        - float3(thickness, thickness, shape.Scale.z);
    edges[0] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(edgePos.x, 0, edgePos.z)) // XZ
        - float3(thickness, shape.Scale.y, thickness);
    edges[1] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(0, edgePos.y, edgePos.z)) // YZ
        - float3(shape.Scale.x, thickness, thickness);
    edges[2] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(-edgePos.x, -edgePos.y, 0)) // -X-Y
        - float3(thickness, thickness, shape.Scale.z);
    edges[3] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(-edgePos.x, 0, -edgePos.z)) // -X-Z
        - float3(thickness, shape.Scale.y, thickness);
    edges[4] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(0, -edgePos.y, -edgePos.z)) // -Y-Z
        - float3(shape.Scale.x, thickness, thickness);
    edges[5] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(-edgePos.x, edgePos.y, 0)) // -XY
        - float3(thickness, thickness, shape.Scale.z);
    edges[6] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(-edgePos.x, 0, edgePos.z)) // -XZ
        - float3(thickness, shape.Scale.y, thickness);
    edges[7] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(edgePos.x, -edgePos.y, 0)) // X-Y
        - float3(thickness, thickness, shape.Scale.z);
    edges[8] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(edgePos.x, 0, -edgePos.z)) // X-Z
        - float3(thickness, shape.Scale.y, thickness);
    edges[9] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(0, -edgePos.y, edgePos.z)) // -YZ
        - float3(shape.Scale.x, thickness, thickness);
    edges[10] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    edge = abs(origin - center + float3(0, edgePos.y, -edgePos.z)) // Y-Z
        - float3(shape.Scale.x, thickness, thickness);
    edges[11] = length(max(edge, 0.0)) + min(max(edge.x, max(edge.y, edge.z)), 0.0);

    float dst = edges[0];
    for (int i = 1; i < arraySize; i++)
    {
        dst = min(dst, edges[i]);
    }
    return dst;
}

float SdfSphere(float3 origin, Shape shape)
{
    float3 pos = shape.Position;
    float radius = min(shape.Scale);

    return distance(origin, pos) - radius;
}

float SdfTorus(float3 origin, Shape shape)
{
    float3 pos = shape.Position;
    float minScale = min(shape.Scale);
    float maxThickness = minScale / 2.0f;
    float modifier = shape.Modifier.x * maxThickness;
    float size = min(shape.Scale.x, shape.Scale.z) - modifier;

    float2 q = float2(length((origin - pos).xz) - size, origin.y - pos.y);
    return length(q) - modifier;
}

// SHAPE DISTANCE
void PrepSdfShape(inout float3 origin, inout Shape shape)
{
    shape.Position = mul(RotateMatrix(shape.Rotation), shape.Position);
    origin = mul(RotateMatrix(shape.Rotation), origin);
    shape.Scale -= shape.Roundness;
}

float SineWave(float3 origin, Shape shape)
{
    if (shape.EnableSineWave == 1)
    {
        float direction = 0;

        if (shape.SineWaveDirection.x == 1)
        {
            direction += origin.x;
        }
        else if (shape.SineWaveDirection.x == -1)
        {
            direction -= origin.x;
        }

        if (shape.SineWaveDirection.y == 1)
        {
            direction += origin.y;
        }
        else if (shape.SineWaveDirection.y == -1)
        {
            direction -= origin.y;
        }

        if (shape.SineWaveDirection.z == 1)
        {
            direction += origin.z;
        }
        else if (shape.SineWaveDirection.z == -1)
        {
            direction -= origin.z;
        }

        return sin(direction * shape.SineWaveFreq +
            (_Time * shape.SineWaveSpeed)) * shape.SineWaveAmp;
    }

    return 0;
}

float SdfShape(float dst, float3 origin, Shape shape)
{
    return (abs(dst - shape.Roundness + shape.WallThickness) - shape.WallThickness -
        SineWave(origin, shape)) / shape.MarchingStepAmount;
}

float3 RepeatFinite(in float3 p, in float c, in float3 l)
{
    return p - c * clamp(round(p / c), -l, l);
}

float GetShapeDistance(float3 origin, Shape shape)
{
    PrepSdfShape(origin, shape);

    // float shapeA = SdfShape(SdfBox(origin, shape), shape);
    // float shapeB = SdfShape(SdfSphere(origin, shape), shape);
    // return Lerp(shapeA, shapeB, sin(_Time) * 0.5 + 0.5);

    float dst = MAX_DST;

    // origin = Twist(origin, float3(10,15,20));
    //origin = RepeatFinite(origin, 3, float3(2, 2, 2));

    if (shape.ShapeType == 0) // Box
    {
        dst = SdfBox(origin, shape);
        //return SdfShape(SdfBox(origin, shape), shape);
    }

    if (shape.ShapeType == 1) // Bounding Box
    {
        dst = SdfBoundingBox(origin, shape);
        //return SdfShape(SdfBoundingBox(origin, shape), shape);
    }

    if (shape.ShapeType == 2) // Sphere
    {
        dst = SdfSphere(origin, shape);
        //return SdfShape(SdfSphere(origin, shape), shape);
    }

    if (shape.ShapeType == 3) // Torus
    {
        dst = SdfTorus(origin, shape);
        //return SdfShape(SdfTorus(origin, shape), shape);
    }


    return SdfShape(dst, origin, shape);
    //return MAX_DST;
}

// RAY
struct Ray
{
    float3 Origin;
    float3 Direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.Origin = origin;
    ray.Direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

// OPERATIONS
// polynomial smooth min (k = 0.1);
// from https://www.iquilezles.org/www/articles/smin/smin.htm
float4 Blend(float a, float b, float3 colA, float3 colB, float blendStrength)
{
    float h = clamp(0.5 + 0.5 * (b - a) / blendStrength, 0.0, 1.0);
    float blendDst = lerp(b, a, h) - blendStrength * h * (1.0 - h);
    float3 blendCol = lerp(colB, colA, h);
    return float4(blendCol, blendDst);
}

float4 Combine(float dstA, float dstB, float3 colourA, float3 colourB, int operation, float blendStrength)
{
    float dst = dstA;
    float3 colour = colourA;

    if (operation == 0)
    {
        if (dstB < dstA)
        {
            dst = dstB;
            colour = colourB;
        }
    }
    else if (operation == 1) // Blend
    {
        float4 blend = Blend(dstA, dstB, colourA, colourB, blendStrength);
        dst = blend.w;
        colour = blend.xyz;
    }
    else if (operation == 2) // Cut
    {
        // max(a,-b)
        if (-dstB > dst)
        {
            dst = -dstB;
            colour = colourB;
        }
    }
    else if (operation == 3) // Mask
    {
        // max(a,b)
        if (dstB > dst)
        {
            dst = dstB;
            colour = colourB;
        }
    }

    return float4(colour, dst);
}

float4 SceneInfo(float3 origin)
{
    float globalDst = MAX_DST;
    float3 globalColour = 1;

    for (int i = 0; i < NumShapes; i ++)
    {
        Shape shape = Shapes[i];
        int numChildren = shape.NumOfChildren;

        float localDst = GetShapeDistance(origin, shape);
        float3 localColour = shape.Colour;


        for (int j = 0; j < numChildren; j ++)
        {
            Shape childShape = Shapes[i + j + 1];
            float childDst = GetShapeDistance(origin, childShape);

            float4 combined = Combine(localDst, childDst, localColour, childShape.Colour, childShape.Operation,
                                      childShape.BlendStrength);
            localColour = combined.xyz;
            localDst = combined.w;
        }

        i += numChildren; // skip over children in outer loop

        float4 globalCombined = Combine(globalDst, localDst, globalColour, localColour, shape.Operation,
                                        shape.BlendStrength);
        globalColour = globalCombined.xyz;
        globalDst = globalCombined.w;
    }

    return float4(globalColour, globalDst);
}

float3 EstimateNormal(float3 pos)
{
    float x = SceneInfo(float3(pos.x + EPSILON, pos.y, pos.z)).w - SceneInfo(float3(pos.x - EPSILON, pos.y, pos.z)).w;
    float y = SceneInfo(float3(pos.x, pos.y + EPSILON, pos.z)).w - SceneInfo(float3(pos.x, pos.y - EPSILON, pos.z)).w;
    float z = SceneInfo(float3(pos.x, pos.y, pos.z + EPSILON)).w - SceneInfo(float3(pos.x, pos.y, pos.z - EPSILON)).w;
    return normalize(float3(x, y, z));
}

float CalculateShadow(Ray ray, float dstToShadePoint)
{
    float rayDst = 0;
    int marchSteps = 0;
    float shadowIntensity = 0.2;
    float brightness = 1;

    while (rayDst < dstToShadePoint)
    {
        marchSteps ++;
        float4 sceneInfo = SceneInfo(ray.Origin);
        float dst = sceneInfo.w;

        if (dst <= EPSILON)
        {
            return shadowIntensity;
        }

        brightness = min(brightness, dst * 200);

        ray.Origin += ray.Direction * dst;
        rayDst += dst;
    }
    return shadowIntensity + (1 - shadowIntensity) * brightness;
}


[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Destination.GetDimensions(width, height);

    Destination[id.xy] = Source[id.xy];

    float2 uv = id.xy / float2(width, height) * 2 - 1;
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;

    while (rayDst < MAX_DST)
    {
        marchSteps ++;
        float4 sceneInfo = SceneInfo(ray.Origin);
        float dst = sceneInfo.w;

        if (dst <= EPSILON)
        {
            float3 pointOnSurface = ray.Origin + ray.Direction * dst;
            float3 normal = EstimateNormal(pointOnSurface - ray.Direction * EPSILON);
            float3 lightDir = _PositionLight ? normalize(_Light - ray.Origin) : -_Light;
            float lighting = saturate(saturate(dot(normal, lightDir)));
            float3 col = sceneInfo.xyz;

            // Shadow
            float3 offsetPos = pointOnSurface + normal * SHADOW_BIAS;
            float3 dirToLight = _PositionLight ? normalize(_Light - offsetPos) : -_Light;

            ray.Origin = offsetPos;
            ray.Direction = dirToLight;

            float dstToLight = _PositionLight ? distance(offsetPos, _Light) : MAX_DST;
            float shadow = CalculateShadow(ray, dstToLight);

            Destination[id.xy] = float4(col * lighting * shadow, 1);

            break;
        }

        ray.Origin += ray.Direction * dst;
        rayDst += dst;
    }
}
