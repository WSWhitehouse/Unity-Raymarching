//---------------------------------------------------------------------
//    This code was generated by a tool.
//
//    Changes to this file may cause incorrect behavior and will be 
//    lost if the code is regenerated.
//
//    Time Generated: 11/22/2021 18:33:53
//---------------------------------------------------------------------

#ifndef MODIFIERFUNCTIONS_HLSL
#define MODIFIERFUNCTIONS_HLSL

// Unity Includes
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"

float4 Mod_Bend_4f75e62b05fa4290bc9060a1615db095(float4 pos, float BendAmount)
{
float c = cos(BendAmount*pos.x);
float s = sin(BendAmount*pos.x);
float2x2  m = float2x2(c,-s,s,c);
return float4(mul(m,pos.xy), pos.z, pos.w); 
}

float Mod_Displacement3D_1a61691f0be94ed6b83151f90f2fefb1(float4 pos, float objDistance, float Displacement)
{
float displacement = sin(Displacement*pos.x)*sin(Displacement*pos.y)*sin(Displacement*pos.z);

return objDistance + displacement;
}

float Mod_Displacement4D_1a61691f0be94ed6b83151f90f2fefb1(float4 pos, float objDistance, float Displacement)
{
float displacement = sin(Displacement*pos.x)*sin(Displacement*pos.y)*sin(Displacement*pos.z)*sin(Displacement*pos.w);

return objDistance + displacement;
}

float4 Mod_InfiniteRepetition_802c270f402c48459b9597d4fb74dba8(float4 pos, float4 RepPeriod)
{
return fmod(pos + 0.5 * RepPeriod, RepPeriod) - 0.5 * RepPeriod;
}

float Mod_Onion_ecbac56f3862424a8fad6d23b416efe1(float4 pos, float objDistance, float Thickness)
{
return abs(objDistance) - Thickness;
}

float Mod_SineWave_a6bfc751b1354407833fc4a471b08d44(float4 pos, float objDistance, float Freq, float Amplitude, float Speed, float4 Dir)
{
        float direction = 0;

        if (Dir.x >= 1)
        {
            direction += pos.x;
        }
        else if (Dir.x <= -1)
        {
            direction -= pos.x;
        }

        if (Dir.y >= 1)
        {
            direction += pos.y;
        }
        else if (Dir.y <= -1)
        {
            direction -= pos.y;
        }

        if (Dir.z >= 1)
        {
            direction += pos.z;
        }
        else if (Dir.z <= -1)
        {
            direction -= pos.z;
        }

if(Dir.w >=1)
{
direction += pos.w;
}
else if (Dir.w <= -1)
{
direction -= pos.w;
}

        return objDistance - sin(direction * Freq + (_Time.y * Speed)) * Amplitude;
}

float4 Mod_TwistX_a2afad70a366443ead7b8bf1ce7c82fc(float4 pos, float TwistAmountX)
{
float c = cos(TwistAmountX*pos.x);
float s = sin(TwistAmountX*pos.x);
float2x2  m = float2x2(c,-s,s,c);
return float4(mul(m,pos.yz), pos.x, pos.w);
}

float4 Mod_TwistY_84cc6354438645f28030230feaa53e13(float4 pos, float TwistAmountY)
{
float c = cos(TwistAmountY*pos.y);
float s = sin(TwistAmountY*pos.y);
float2x2  m = float2x2(c,-s,s,c);
return float4(mul(m,pos.xz), pos.y, pos.w);
}

float4 Mod_TwistZ_c1d0359417c14757b9996d01b0db1171(float4 pos, float TwistAmountZ)
{
float c = cos(TwistAmountZ*pos.z);
float s = sin(TwistAmountZ*pos.z);
float2x2  m = float2x2(c,-s,s,c);
return float4( mul(m,pos.xy), pos.z, pos.w);
}

#endif // MODIFIERFUNCTIONS_HLSL